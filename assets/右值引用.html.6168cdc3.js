import{d as n}from"./app.b3236e38.js";import{_ as a}from"./plugin-vue_export-helper.21dcd24c.js";const s={},e=n(`<h2 id="c-\u5F53\u4E2D\u7684\u53F3\u503C\u5F15\u7528" tabindex="-1"><a class="header-anchor" href="#c-\u5F53\u4E2D\u7684\u53F3\u503C\u5F15\u7528" aria-hidden="true">#</a> c++\u5F53\u4E2D\u7684\u53F3\u503C\u5F15\u7528</h2><p>\u53F3\u503C\u5F15\u7528\u53EF\u7528\u4E8E\u4E3A\u4E34\u65F6\u5BF9\u8C61\u5EF6\u957F\u751F\u5B58\u671F\uFF0C\u4E00\u4F46\u53F3\u503C\u5F15\u7528\u7ED1\u5B9A\u5230\u7EAF\u53F3\u503C\uFF0C\u6216\u8005\u4EA1\u503C\u90A3\u4E48\u4E34\u65F6\u5BF9\u8C61\u7684\u751F\u5B58\u671F\u4F1A\u5339\u914D\u8BE5\u5F15\u7528</p><blockquote><p>In general, the effect of this rule is that named rvalue references are treated as lvalues and unnamed rvalue references to objects are treated as xvalues; rvalue references to functions are treated as lvalues whether named or not. --<cite>ISO N4849 7.2 value category </cite></p></blockquote><p>\u901A\u5E38\uFF0C\u5177\u540D\u53F3\u503C\u5F15\u7528\u88AB\u89C6\u4E3A\u662F lvalue\uFF0C\u800C\u7ED1\u5B9A\u5230\u5BF9\u8C61\u7684\u65E0\u540D\u53F3\u503C\u5F15\u7528\u88AB\u89C6\u4E3A\u662F xvalue\uFF0C\u65E0\u8BBA\u5177\u540D\u4E0E\u5426\u7ED1\u5B9A\u5230\u51FD\u6570\u7684\u53F3\u503C\u5F15\u7528\u88AB\u89C6\u4E3A\u662Flvalue \uFF0C\u56E0\u6B64\u5728\u91CD\u8F7D\u51FD\u6570\u5F53\u4E2D\uFF0C\u5B9E\u53C2\u662F\u5DE6\u503C\u4F1A\u8C03\u7528<code>f(int&amp;)</code>\uFF0C\u662F\u53F3\u503C\u4F1A\u8C03\u7528<code>f(int&amp;&amp;)</code></p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;&amp;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;rvalue reference\\n&quot;</span><span class="token punctuation">;</span><span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;lvalue reference\\n&quot;</span><span class="token punctuation">;</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="\u8F6C\u53D1\u5F15\u7528" tabindex="-1"><a class="header-anchor" href="#\u8F6C\u53D1\u5F15\u7528" aria-hidden="true">#</a> \u8F6C\u53D1\u5F15\u7528</h2><p>\u5728\u6A21\u677F\u51FD\u6570\u5F53\u4E2D\u6709\u5982\u4E0B\u53C2\u6570</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>
<span class="token function">f</span><span class="token punctuation">(</span>T <span class="token operator">&amp;&amp;</span> v<span class="token punctuation">)</span> <span class="token punctuation">{</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;call f\\n&quot;</span><span class="token punctuation">;</span><span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token function">f</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>\u4E3A\u4EC0\u4E48\u5B9E\u53C2\u662Fx\u4E5F\u53EF\u4EE5\u8C03\u7528\u8BE5\u51FD\u6570\u5462\uFF1F\u5728\u6A21\u677F\u51FD\u6570\u5F53\u4E2D\u8FD9\u5E76\u4E0D\u4EE3\u8868\u7740\u53F3\u503C\u5F15\u7528\u3002\u8FD9\u662F\u4E00\u79CD\u7279\u6B8A\u7684\u5F15\u7528\uFF0C\u53EB\u505A\u8F6C\u53D1\u5F15\u7528(forwarding reference)\u3002\u5F53\u5B9E\u53C2\u662F\u5DE6\u503C\u65F6\u4F1A\u8C03\u7528<code>f&lt;int&amp;&gt;(int&amp;)</code>\u800C\u5B9E\u53C2\u662F\u53F3\u503C\u4F1A\u8C03\u7528<code>f&lt;int&gt;(int&amp;&amp;)</code></p><h3 id="reference-collasping" tabindex="-1"><a class="header-anchor" href="#reference-collasping" aria-hidden="true">#</a> reference collasping</h3><p>\u8003\u8651\u8FD9\u6837\u4E00\u4E2A\u573A\u666F</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;&amp;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;rvalue reference\\n&quot;</span><span class="token punctuation">;</span><span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;lvalue reference\\n&quot;</span><span class="token punctuation">;</span><span class="token punctuation">}</span>

<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>
<span class="token function">pass</span><span class="token punctuation">(</span>T <span class="token operator">&amp;&amp;</span> v<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">f</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">pass</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token function">pass</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>\u8FD9\u4E2A\u4F8B\u5B50\u4E2D\u65E0\u8BBA\u65F6<code>pass(0)</code>\u8FD8\u662F<code>pass(x)</code>\u90FD\u662F\u4F1A\u8F93\u51FA<code>lvalue reference</code>\uFF0C\u4E0A\u9762\u5DF2\u7ECF\u63D0\u5230 named reference \u88AB\u89C6\u4E3A\u5DE6\u503C\uFF0C\u56E0\u6B64\u4F1A\u8C03\u7528<code>f(int&amp;)</code> \u3002\u56E0\u6B64c++\u5F15\u5165\u4E86\u79F0\u4E3A reference collapsing \u7684\u89C4\u5219</p><blockquote><p>If a typedef-name (9.2.3, 13.2) or a decltype-specifier (9.2.8.2) denotes a type TR that is a reference to a type T, an attempt to create the type \u201Clvalue reference to cv TR\u201D creates the type \u201Clvalue reference to T\u201D, while an attempt to create the type \u201Crvalue reference to cv TR\u201D creates the type TR. [Note: This rule is known as reference collapsing. --<cite>ISO N4849 9.3.3.2 reference</cite></p></blockquote><p>\u603B\u800C\u8A00\u4E4B\uFF0C\u53EA\u8981\u5B58\u5728\u7C7B\u578B\u4E3A<code>T &amp;</code>\u5C31\u4F1A\u88AB\u63A8\u5BFC\u4E3A\u5DE6\u503C\u5F15\u7528\uFF0C\u53EA\u6709<code>T &amp;&amp; &amp;&amp;</code>\u4F1A\u88AB\u63A8\u5BFC\u4E3A\u53F3\u503C\u5F15\u7528\u3002 \u6B64\u4F8B\u5B50\u4E2D\uFF0C<code>T &amp;&amp; &amp;</code>\u88AB\u63A8\u5BFC\u4E3A<code>T &amp;</code></p><p>\u56E0\u6B64\u53F3\u503C\u5F15\u7528\u7684\u53C2\u6570\u5728\u8F6C\u53D1\u8FC7\u7A0B\u4E2D\u7C7B\u578B\u53D1\u751F\u4E86\u6539\u53D8(T1 &amp;&amp; -&gt; T1 &amp;)\uFF0Cc++\u4E2D\u5F15\u5165\u4E86<code>std::forward</code>\u6765\u89E3\u51B3\u8FD9\u4E2A\u95EE\u9898</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code>std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">forward</span><span class="token generic class-name"><span class="token operator">&lt;</span>T<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div>`,17);function p(t,o){return e}var u=a(s,[["render",p]]);export{u as default};
